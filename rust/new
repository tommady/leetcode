#!/bin/bash
###################################
# just bash new {problem's name}  #
# example: bash new two-sum       #
###################################

set -euo pipefail

problem_name=$(bb "$1" -s -l -t -)

header=$(curl -sIL --max-redirs 1 https://leetcode.com/problems/$problem_name | rg -o -U --multiline-dotall -w '(HTTP/2 200)(.)*')

csrf=$(echo $header | rg -o -w 'csrftoken=([^;]+);*?')
# get rid of csrftoken= string
csrf=${csrf:10}

request_json=$(jq -r -n \
  --arg ts "$problem_name" \
'{
    "operationName": "questionData", 
    "variables": {"titleSlug": $ts}, 
    "query": "query questionData($titleSlug: String!) 
    { 
      question(titleSlug: $titleSlug) 
      { 
        questionFrontendId 
        codeDefinition 
        content
        hints
      }
    }"
}')

response_json=$(echo $request_json | curl -s -XPOST 'https://leetcode.com/graphql' \
  -H 'authority: leetcode.com' \
  -H 'pragma: no-cache' \
  -H 'cache-control: no-cache' \
  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36' \
  -H 'content-type: application/json' \
  -H "x-csrftoken: ${csrf}" \
  -H "referer: https://leetcode.com/problems/${problem_name}/" \
  --data-binary @- \
  --compressed)

code_definition=$(echo $response_json | jq -r '.data.question.codeDefinition')
question_frontend_id=$(echo $response_json | jq -r '.data.question.questionFrontendId')
content=$(echo $response_json | jq -r '.data.question.content')
hints=$(echo $response_json | jq -r '.data.question.hints')

content=$(echo $content | sd '&quot;' '"')
content=$(echo $content | sd '&[\w]+;' ' ')
content=$(echo $content | sd '&#39;' "'")
content=$(echo $content | sd -F '</p>' '\n// ')
content=$(echo $content | sd -F '<strong>' '\n// ')
content=$(echo $content | sd '<[^>]*>' '')
formatted_content="// ${content}\n"

hints=$(echo $hints | sd '<[^>]*>' '')
hints=$(echo $hints | sd '&[\w]+;' ' ')
formatted_hints=""
ITER=1
for row in $( echo "${hints}" | jq -c -r '.[] | @base64' ); do
    formatted_hints+="// hint ${ITER}\n// "
    formatted_hints+=$(echo $row | base64 --decode)
    formatted_hints+="\n\n"
    ((ITER++))
done

# finding out the rust default code
for row in $( echo "${code_definition}" | jq -c -r '.[] | @base64' ); do
  _jq() {
    echo $row | base64 --decode | jq -r ${1}
  }
  
  a=$(_jq '.value')
  if [ $a == "rust" ]; then
    code_definition=$(_jq '.defaultCode')
    break
  fi
done

if [ -z "$code_definition" ]; then
  echo "this problem is not support language: rust"
  exit 1
fi

# building the unit tests
function_name=$(echo $code_definition | rg 'pub\sfn\s(.*)\(' -or '$1$2')
examples=$(echo $formatted_content | rg 'Example\s\d:(.*)Constraints' -or '$1$2')
readarray -d "Example" -t examples_array <<< "$examples"
unit_tests=""
for value in "${examples_array[@]}"; do
    if result=$(echo $value | rg '(?:Input|Output)'); then
        input=$(echo $value | rg 'Input:\s(.*)\\n\/\/\sOutput' -or '$1$2')
        output=$(echo $value | rg 'Output:\s(.*)\\n\/\/' -or '$1$2')
        input=$(echo $input | sd '\n' '')
        output=$(echo $output | sd '\n' '')
        input=$(echo $input | sd '//' '')
        output=$(echo $output | sd '//' '')

        # formatting the input
        #
        # removing the arg = pattern
        input=$(echo $input | sd '(\w*\s=\s)' '')
        # from [] into vec![]
        # change ', ' into '__CONNECTION__' for the splitting next
        input=$(echo $input | sd ',\s' '__CONNECTION__')
        connection_count=$(echo $input | rg --count-matches '__CONNECTION__')
        tmp_input=""
        readarray -d "__CONNECTION__" -t input_array <<< "$input"
        for vector in "${input_array[@]}"; do 
            if [[ "$vector" == "CONNECTION" || "$vector" = "" ]] ; then
                continue
            fi
            if result=$(echo $vector | rg '\[.*\]'); then
                tmp_input+="vec!${vector}"
            else 
                tmp_input+=$vector
            fi 
            if (( connection_count > 0 )); then
                tmp_input+=","
                connection_count=$((connection_count-1))
            fi
        done
        input=$tmp_input
        # from "" into "".to_string()
        if result=$(echo $input | rg '".*"'); then
            input=$(echo $input | sd '(?P<string>"[\w|\s]*")' '${string}.to_string()')
        fi

        # formatting the output
        #
        # from "" into "".to_string()
        if result=$(echo $output | rg '".*"'); then
            output=$(echo $output | sd '(?P<string>"[\w|\s]*")' '${string}.to_string()')
        fi
        # from [] into vec![]
        if result=$(echo $output | rg '\[.*\]'); then
            output=$(echo $output | sd '\[(.*)\]' 'vec![$1]')
        fi

        unit_tests+="assert_eq!(${output}, Solution::${function_name}(${input}));\n"
    fi
done

problem_name=$(bb "$problem_name" -f - -t _)
file="./src/p${question_frontend_id}_${problem_name}.rs"
cp ./template.rs $file

sd "__PROBLEM_DESC__" "$formatted_content" $file
sd "__PROBLEM_DEFAULT_CODE__" "$code_definition" $file
sd "__PROBLEM_ID__" "$question_frontend_id" $file
sd "__PROBLEM_HINTS__" "$formatted_hints" $file
sd "__PROBLEN_UNIT_TESTS__" "$unit_tests" $file

rustfmt $file

echo "mod p${question_frontend_id}_${problem_name};" >> ./src/lib.rs
rustfmt ./src/lib.rs
